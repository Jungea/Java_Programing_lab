---------------------------------------------------------
은행계좌 클래스를 상속하는 일반계좌, 마이너스통장계좌 클래스를 정의하고 사용하는 프로그램을 작성하시오.

- BankAccount 클래스 ---> 첨부한 클래스를 그대로 이용
  protected 필드: 계좌번호
  private 필드: 잔액
  메소드:
     계좌번호와 잔액을 매개변수로 받아 초기화하는 생성자
     계좌번호를 매개변수로 받아 초기화하는 생성자 - 잔액은 0으로 초기화
     잔액 getter
     입금
     출금

- NormalAccount 클래스 - BankAccount를 상속
  메소드:
     계좌번호와 잔액을 매개변수로 받아 초기화하는 생성자
     계좌번호를 매개변수로 받아 초기화하는 생성자 - 잔액은 0으로 초기화
     출금 메소드 오버라이드 - 잔액부족시 출금 수행하지 않고 오류메시지 출력
     이 외의 메소드는 정의하지 말 것

- MinusAccount 클래스 - BankAccount를 상속
  private 필드: 대출한도(잔액의 마이너스 한도)
  메소드:
     계좌번호, 잔액, 대출한도를 매개변수로 받아 초기화하는 생성자
     계좌번호, 대출한도를 매개변수로 받아 초기화하는 생성자 - 잔액은 0으로 초기화
     출금 메소드 오버라이드 - 대출한도 초과시 출금 수행하지 않고 오류메시지 출력
     대출한도 getter
     이 외의 메소드는 정의하지 말 것

- AccountTest 클래스의 main 메소드는 다음을 수행

(1) 다음과 같은 4개의 계좌 생성

일반 계좌(계좌번호 11, 잔액 1000로 초기화)
일반 계좌(계좌번호 22로 초기화)
마이너스통장 계좌(계좌번호 33, 잔액 1000, 대출한도 500로 초기화)
마이너스통장 계좌(계좌번호 44, 대출한도 500로 초기화)

(2) 4개 계좌의 최대 출금 가능액 각각 출력
(3) 사용자로부터 출금액 입력받아 4개 계좌에서 각각 출금 수행
(4) 사용자로부터 입금액 입력받아 4개 계좌에 각각 입금 수행
(5) 4개 계좌의 최대 출금 가능액 각각 출력


- 실행 예:

hw7_1: 홍길동

최대 출금가능액
acc1 = 1000
acc2 = 0
acc3 = 1500
acc4 = 500

출금액 입력: 500
계좌 11: 500원 출금
계좌 22: 잔액 부족으로 출금 실패
계좌 33: 500원 출금
계좌 44: 500원 출금

입금액 입력: 100
계좌 11: 100원 입금
계좌 22: 100원 입금
계좌 33: 100원 입금
계좌 44: 100원 입금

최대 출금가능액
acc1 = 600
acc2 = 100
acc3 = 1100
acc4 = 100


----------------------------------------------------------
목적
- 상속을 연습한다.

----------------------------------------------------------
유의사항
- 적절한 comment
  작성자, 작성일, 파일 내용 설명 등의 주석을 파일의 가장 앞부분에 둘것
- 들여쓰기
- 식별자 이름을 자바 관례에 맞게 적절히 붙일 것
- command-line에서 java -jar 과제코드.jar 로 채점합니다.
철자도 똑같게 이 명령이 제대로 실행되어야 합니다.
- 과제코드와 본인의 이름을 맨 처음 출력

----------------------------------------------------------
제출 
- 과제코드.jar 파일
- .java 파일


// 은행 계좌 클래스
public class BankAccount {
 protected int id; // 계좌번호
 private int balance; // 잔액
 
 public BankAccount(int id, int balance) {
  this.id = id;
  this.balance = balance;
 }
 public BankAccount(int id) {
  this(id, 0);
 }
 public int getBalance() { // 잔액조회
  return balance;
 }
 public void deposit(int amount) { // 입금
  System.out.println("계좌 " + id + ": " + amount + "원 입금");
  balance += amount;
 }
 public void withdraw(int amount) { // 출금
  System.out.println("계좌 " + id + ": " + amount + "원 출금");
  balance -= amount;
 }
}