[lab5_4] Point 클래스
---------------------------------------------------------
x 좌표를 갖는 1차원 점 클래스 정의하고 이용하는 프로그램이다. 아래 첨부한 코드를 완성하시오.

- Point 클래스
  필드: x좌표(double형)
  메소드:
     move() - double형 매개변수를 받아, 그 값만큼 x 좌표를 이동
     move() - 매개변수를 받지 않고, x 좌표를 1만큼 이동
     distance() - Point형 매개변수를 받아, 현재 점과의 거리(음이 아님)를 구하여 리턴 *******
     toString() - x 좌표값을 문자열로 만들어 리턴

- PointTest 클래스는 첨부한 코드 참고

** PointTest 클래스의 main 메소드에서는 Point 객체의 필드를 직접 접근하지 말 것

- 실행 예:
lab5_4: 홍길동
거리 = 7.5
Point [x=6.5]
Point [x=-1.0]

----------------------------------------------------------
목적
- 클래스 정의와 메소드 오버로딩을 연습한다.

----------------------------------------------------------
유의사항
- 적절한 comment
  작성자, 작성일, 파일 내용 설명 등의 주석을 파일의 가장 앞부분에 둘것
- 들여쓰기
- 식별자 이름을 관례에 맞게 적절히 붙일 것
- command-line에서 java -jar 과제코드.jar 로 채점합니다.
철자도 똑같게 이 명령이 제대로 실행되어야 합니다.
- 과제코드와 본인의 이름을 맨 처음 출력

----------------------------------------------------------
제출 
- 과제코드.jar 파일
- .java 파일

 

/*
 * 파일명: Point.java
 * 작성일: 2018.4.5
 * 작성자: 홍길동
 * 내용:  x 좌표를 갖는 1차원 점을 표현하는 Point 클래스를 정의
 */

public class Point {
 // (1) 필드: double형 x 좌표
 double x = 0;

 // (2) move() 메소드 : double형 매개변수를 그 값만큼 x 좌표를 이동
 void move(double offset) {
  x += offset;
 }

 // (3) move() 메소드 : 매개변수를 받지 않고 x좌표를 1만큼 이동
 void move() {
  x++;
 }

 // (4) distance() 메소드 : Point형 매개변수를 받아, 매개변수로 받은 점과 현재 점의 거리를 구하여 리턴 *******

 

 


 // toString() 메소드: Point의 속성을 문자열로 만들어 리턴 - @Override, public은 6, 7장에서 배움
 @Override
 public String toString() {
  return "Point [x=" + x + "]";
 }
}


/*
 * 파일명: PointTest.java
 * 작성일: 2018.4.5
 * 작성자: 홍길동
 * 내용:  점을 표현하는 Point 클래스 객체를 생성하고 이용하는 프로그램
 */

public class PointTest {
    public static void main(String[] args) {
     System.out.println("lab5_4: 홍길동");
     
     // (5) Point 객체 p1, p2를 생성
     Point p1 = new Point();
     Point p2 = new Point();
       
     // (6) p1을 4.5  만큼 이동, p2는 -1.0만큼 이동, p1을 1.0만큼 다시 한 번 이동
     p1.move(4.5);
     p2.move(-1.0);
      p1.move(1.0);
     
     // (7) p1만 이동(매개변수 없이)
     p1.move();
     
    // (8) p1과 p2의 거리를 출력 *******
 

 

 

          
     // p1, p2의 속성을 출력
     System.out.println(p1.toString()); // p1.toString() 대신 p1 라고 적어도 됨
     System.out.println(p2.toString()); // p2.toString() 대신 p2 라고 적어도 됨
    }
}

 