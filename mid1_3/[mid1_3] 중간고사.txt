------------------------------------------
다음은 은행계좌를 다루는 프로그램이다. 주석의 설명을 참고하여 (1)~(5) 부분을 완성하시오.

● 은행계좌(Account) 객체는 아이디와 잔액 속성을 지님
● 송금시 송금수수료를 부과함
● 클래스에 필드나 메소드를 추가하면 안됨
● 출력은     
500
0
false
true
id=1, balance=0
id=2, balance=6500


public class Main {
   public static void main(String[] args) {
      // (1) 송금수수료 출력: 500이라는 리터럴을 적으면 안됨
      System.out.println(                                 );


      // (2) 생성된 계좌수 출력: 0이라는 리터럴을 적으면 안됨
      System.out.println(                                 );


      // 잔액이 5000, 2000인 계좌 객체 a1, a2 생성
      Account a1 = new Account(5000);
      Account a2 = new Account(2000);

      // a1에서 a2로 5000원 송금 시도 --> 실패
      boolean result = a1.transfer(a2, 5000);
      System.out.println(result);    // false

      // a1에서 a2로 4500원 송금
      result = a1.transfer(a2, 4500);
      System.out.println(result);    // true

      // a1과 a2의 계좌 정보 출력
      System.out.println(a1);
      System.out.println(a2);
   }
}

 

public class Account {
   private int id;   // 아이디
   private int balance;  // 잔액
   private static int number = 0; // 계좌수
   public static final int FEE = 500;  // 송금수수료

   // (3) 아이디는 계좌생성순으로 1, 2, 3, ... 로 자동 부여하고
   //     잔액은 매개변수로 받은 값으로 초기화하는 생성자

 

 

 


   // (4) getNumber()-생성된 계좌수를 리턴하는 static 메소드


 

 

   // (5) transfer() - 현재 계좌에서 상대 계좌 other로 amount
   //    만큼을 송금하는 메소드
   // -송금수수료 부과(송금수수료는 위에서 정의한 상수 이용)
   // -잔액 부족시 송금할 수 없으며,
   // -송금 성공 여부(true/false)를 리턴
   // -이 메소드에는 출력문 없음
   public boolean transfer(Account other, int amount) {
 

 

   }

   @Override
   public String toString() {
      return "id=" + id + ", balance=" + balance;
   }
}